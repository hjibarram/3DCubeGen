#!/usr/bin/env python3

import click
import cloup
from cloup.constraints import mutually_exclusive, RequireExactly, IsSet, If
import numpy as np
#import warnings
#warnings.filterwarnings("ignore")
from CubeGen.tools.cubegen import map_ifu
from CubeGen.tools.mapgen import gen_map
from CubeGen.tools.images import get_jpg
import CubeGen.tools.tools as tools
import os.path as ptt
import os

@click.group('3dcubegen', short_help='CLI for the 3dcubegen tools')
def cli():
    pass


@cloup.command(short_help='Run the cubegen')
@click.option('-c', '--config_file', type=str, default='', help='name of the config file')
@click.option('-o', '--out_path', type=str, default='out_cubes/', help='path of the output cube files')
@click.option('-v', '--redux_ver', type=str, default='1.1.1.dev0', help='the DRP reduction version of the lvmCFrame')
@click.option('-r', '--redux_dir', type=str, default='', help='path of the redux dir, default set to " " to set to path_sas/sdsswork/lvm/spectro/redux')
@click.option('-s', '--sigm_s', type=float, default=32.2, help='smoth kernel size used to reconstruct the cube')
@click.option('-p', '--pix_s', type=float, default=0.0, help='spaxel size used to reconstruct the cube, default set to 0 to fix it to 0.75*sigm_s')
@click.option('-a', '--alph_s', type=float, default=2.0, help='kernel "shape" factor, a value equal of 2 returns a Gaussian kerner, larger than 2 returns a sharper kernel')
@click.option('-f', '--flu16', is_flag=True, default=True,help='keyword to return a cube with units of 10^{-16} erg/s/cm2/A, if False, the units are erg/s/cm2/A')
@click.option('-n', '--namef', type=str, help='output root name of the data cube')
@click.option('-m', '--use_slitmap', is_flag=True, default=True,help='use the astrometry saved in the slitmap header')
@click.option('-b', '--pbars', is_flag=True, default=True,help='activate or deactivate the progress bar')
@click.option('-g', '--spec_range', type=tuple, default=(None,None), help='optional, spectral range for the output cube')
@click.option('-t', '--path_sas', type=str, default='', help='path to the local SDSS SAS directory, will be used this value if SAS_BASE_DIR is not defined in the environment')
@click.option('-y', '--basename', type=str, default='lvmSFrame-NAME.fits', help='base name of the RSS file')
@click.option('-e', '--errors', is_flag=True, default=True,help='activate or deactivate the error estimation')
@click.option('-u', '--fac_sizey', type=float, default=1.1, help='factor of the FoV in Y')
@click.option('-i', '--fac_sizex', type=float, default=1.1, help='factor of the FoV in X')
@click.option('-k', '--cent', is_flag=True, default=False,help='activate the centering of the FoV')
@click.option('-i', '--coord_cen', type=list, default=[0,0], help='central coordinates ra, dec in degrees')
@click.option('-h', '--pathf', type=str, default='', help='path of the list of mjd, explist and tiles of the targets')

def sincube(config_file,out_path,redux_ver,redux_dir,sigm_s,pix_s,alph_s,flu16,namef,use_slitmap,pbars,spec_range,path_sas,basename,errors,fac_sizey,fac_sizex,cent,coord_cen,pathf):
    

    data=tools.read_config_file(config_file)
    if data:
        typeF=data['sincube'][0]['survey_type']
        if 'LVM' in typeF:
            out_path=data['sincube'][0]['out_path']
            redux_ver=data['sincube'][0]['redux_ver']
            redux_dir=data['sincube'][0]['redux_dir']
            sigm_s=data['sincube'][0]['sigm_s']
            pix_s=data['sincube'][0]['pix_s']
            alph_s=data['sincube'][0]['alph_s']
            flu16=data['sincube'][0]['flu16']
            namef=data['sincube'][0]['nameF']
            use_slitmap=data['sincube'][0]['use_slitmap']
            pbars=data['sincube'][0]['pbars']
            spec_range=data['sincube'][0]['spec_range']
            path_sas=data['sincube'][0]['path_sas']
            basename=data['sincube'][0]['basename']
            errors=data['sincube'][0]['errors']
            fac_sizey=data['sincube'][0]['fac_sizeY']
            fac_sizex=data['sincube'][0]['fac_sizeX']
            cent=data['sincube'][0]['cent']
            coord_cen=data['sincube'][0]['coord_cen']
            pathf=data['sincube'][0]['pathF']
            if spec_range[0] == 0 and spec_range[1] == 0:
                spec_range=(None,None)
            else:
                spec_range=(spec_range[0],spec_range[1])
        else:
            print('Error: The config file is not for LVM data')
            return
    try:
        path_sas=os.environ['SAS_BASE_DIR']+'/'
    except:
        path_sas=path_sas+'/'

    if pix_s == 0:
        pix_s=0.75*sigm_s
    if redux_dir == '':
        redux_dir=path_sas+'sdsswork/lvm/spectro/redux'
    notebook=False

    explist,mjd,tilelist,tileglist=tools.read_explist(fname=namef,path=pathf)        
    map_ifu(explist,nameF=namef,flu16=flu16,cent=cent,coord_cen=coord_cen,errors=errors,fac_sizeX=fac_sizex,fac_sizeY=fac_sizey,
        spec_range=spec_range,multiT=True,use_slitmap=use_slitmap,pbars=pbars,out_path=out_path,sigm_s=sigm_s,pix_s=pix_s,
        alph_s=alph_s,agcam_dir=path_sas+'sdsswork/data/agcam/lco',redux_dir=redux_dir,redux_ver=redux_ver,tilelist=tilelist,
        tileglist=tileglist,mjd=mjd,basename=basename,notebook=notebook)
    
    
cli.add_command(sincube)

@cli.command('pipecube', short_help='pipeline to obtain the MC and LV cubes')
@click.option('-c', '--config_file', type=str, default='', help='name of the config file')
@click.option('-o', '--out_path', type=str, default='out_cubes/', help='path of the output cube files')
@click.option('-v', '--redux_ver', type=str, default='1.1.1.dev0', help='the DRP reduction version of the lvmCFrame')
@click.option('-r', '--redux_dir', type=str, default='', help='path of the redux dir, default set to " " to set to path_sas/sdsswork/lvm/spectro/redux')
@click.option('-s', '--type', type=str, default='c', help='id for the kernel selection: 16-a,8-b,4-c,2-d,1-e,1/2-f,1/4-g,1/8-h,1/16-i, default c')
@click.option('-f', '--flu16', is_flag=True, default=True,help='keyword to return a cube with units of 10^{-16} erg/s/cm2/A, if False, the units are erg/s/cm2/A')
@click.option('-n', '--namel', type=str, help='list of targets for the data cube, comma separated')
@click.option('-m', '--use_slitmap', is_flag=True, default=True,help='use the astrometry saved in the slitmap header')
@click.option('-b', '--pbars', is_flag=True, default=True,help='activate or deactivate the progress bar')
@click.option('-t', '--path_sas', type=str, default='', help='path to the local SDSS SAS directory, will be used this value if SAS_BASE_DIR is not defined in the environment')
@click.option('-y', '--basename', type=str, default='lvmSFrame-NAME.fits', help='base name of the RSS file')
@click.option('-e', '--errors', is_flag=True, default=True,help='activate or deactivate the error estimation')
@click.option('-u', '--fac_sizey', type=float, default=1.1, help='factor of the FoV in Y')
@click.option('-i', '--fac_sizex', type=float, default=1.1, help='factor of the FoV in X')
@click.option('-k', '--cent', is_flag=True, default=False,help='activate the centering of the FoV')
@click.option('-i', '--coord_cenl', type=list, default=[[0,0]], help='list of central coordinates ra, dec in degrees')
@click.option('-h', '--pathf', type=str, default='', help='path of the list of mjd, explist and tiles of the targets')

def pipecube(config_file,out_path,redux_ver,redux_dir,type,flu16,namel,use_slitmap,pbars,path_sas,basename,errors,fac_sizey,fac_sizex,cent,coord_cenl,pathf):
    
    namel = namel.split(",")
    data=tools.read_config_file(config_file)
    if data:
        typeF=data['pipecube'][0]['survey_type']
        if 'LVM' in typeF:
            out_path=data['pipecube'][0]['out_path']
            redux_ver=data['pipecube'][0]['redux_ver']
            redux_dir=data['pipecube'][0]['redux_dir']
            type=data['pipecube'][0]['type']
            flu16=data['pipecube'][0]['flu16']
            namel=data['pipecube'][0]['nameL']
            use_slitmap=data['pipecube'][0]['use_slitmap']
            pbars=data['pipecube'][0]['pbars']
            path_sas=data['pipecube'][0]['path_sas']
            basename=data['pipecube'][0]['basename']
            errors=data['pipecube'][0]['errors']
            fac_sizey=data['pipecube'][0]['fac_sizeY']
            fac_sizex=data['pipecube'][0]['fac_sizeX']
            cent=data['pipecube'][0]['cent']
            coord_cenl=data['pipecube'][0]['coord_cenL']
            pathf=data['pipecube'][0]['pathF']
        else:
            print('Error: The config file is not for LVM data')
            return
    try:
        path_sas=os.environ['SAS_BASE_DIR']+'/'
    except:
        path_sas=path_sas+'/'

    sigm_s,pix_s=tools.kernel_pipe(type=type)
    alph_s=2.0
    
    if redux_dir == '':
        redux_dir=path_sas+'sdsswork/lvm/spectro/redux'
    notebook=False

    for it in range(0, len(namel)):
        nameF1=namel[it]
        try:
            coord_cen=coord_cenl[it]
        except:
            coord_cen=[0,0]
        explist,mjd,tilelist,tileglist=tools.read_explist(fname=nameF1,path=pathf)
        dit=len(explist)
        if dit <= 160:
            spec_range=(None,None)
            if dit < 3:
                sigm_s=17.6/2*32*1/8
                pix_s=17.6/2*0.75*32*1/8
            map_ifu(explist,nameF=nameF1+type,flu16=flu16,cent=cent,coord_cen=coord_cen,errors=errors,fac_sizeX=fac_sizex,fac_sizeY=fac_sizey,
                spec_range=spec_range,multiT=True,use_slitmap=use_slitmap,pbars=pbars,out_path=out_path,sigm_s=sigm_s,pix_s=pix_s,
                alph_s=alph_s,agcam_dir=path_sas+'/sdsswork/data/agcam/lco',redux_dir=redux_dir,redux_ver=redux_ver,tilelist=tilelist,
                tileglist=tileglist,mjd=mjd,basename=basename,notebook=notebook)
        else:
            if dit <= 500:
                spec_range_l=[(3000,4000),(4000,5000),(5000,6000),(6000,7000),(7000,8000),(8000,9000),(9000,10000)]
            elif dit <= 1000:
                spec_range_l=[(3000,4000),(4000,4500),(4500,5000),(5000,5500),(5500,6000),(6000,6500),(6500,7000),(7000,7500),(7500,8000),(8000,8500),(8500,9000),(9000,9500),(9500,10000)]
            else:
                spec_range_l=[(3000,4000),(4000,4250),(4250,4500),(4500,4750),(4750,5000),(5000,5250),(5250,5500),(5500,5750),(5750,6000),(6000,6250),(6250,6500),(6500,6750),(6750,7000),(7000,7250),(7250,7500),(7500,7750),(7750,8000),(8000,8250),(8250,8500),(8500,8750),(8750,9000),(9000,9250),(9250,9500),(9500,9750),(9750,10000)]
            for i in range(0, len(spec_range_l)):
                nameF=nameF1+type+'_'+"{:0>2}".format(str(int(i)))
                spec_range=spec_range_l[i]
                map_ifu(explist,nameF=nameF,flu16=flu16,cent=cent,coord_cen=coord_cen,errors=errors,fac_sizeX=fac_sizex,fac_sizeY=fac_sizey,
                    spec_range=spec_range,multiT=True,use_slitmap=use_slitmap,pbars=pbars,out_path=out_path,sigm_s=sigm_s,pix_s=pix_s,
                    alph_s=alph_s,agcam_dir=path_sas+'/sdsswork/data/agcam/lco',redux_dir=redux_dir,redux_ver=redux_ver,tilelist=tilelist,
                    tileglist=tileglist,mjd=mjd,basename=basename,notebook=notebook)



if __name__ == "__main__":
    cli()
